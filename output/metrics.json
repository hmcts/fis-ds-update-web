{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2022-07-18T12:08:29.134Z",
    "end": "2022-07-18T12:08:36.192Z",
    "duration": 7058,
    "testsRegistered": 2,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 1,
    "hasSkipped": true
  },
  "passes": [],
  "pending": [],
  "failures": [
    {
      "title": "Smoke tests @smoke-tests @cross-browser  Sign in as citizen and create a case",
      "code": "function (done) {\n    recorder.errHandler((err) => {\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      if (test.throws) { // check that test should actually fail\n        try {\n          assertThrown(err, test.throws);\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test);\n          recorder.add(() => done());\n          return;\n        } catch (newErr) {\n          err = newErr;\n        }\n      }\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n\n    if (isAsyncFunction(testFn)) {\n      event.emit(event.test.started, test);\n\n      const catchError = e => {\n        recorder.throw(e);\n        recorder.catch((e) => {\n          const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n          recorder.session.start('teardown');\n          recorder.cleanAsyncErr();\n          event.emit(event.test.failed, test, err);\n          event.emit(event.test.finished, test);\n          recorder.add(() => done(err));\n        });\n      };\n\n      let injectedArguments;\n      try {\n        injectedArguments = getInjectedArguments(testFn, test);\n      } catch (e) {\n        catchError(e);\n        return;\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test);\n        });\n        recorder.add('finish test', () => done());\n        recorder.catch();\n      }).catch(catchError);\n      return;\n    }\n\n    try {\n      event.emit(event.test.started, test);\n      testFn.call(test, getInjectedArguments(testFn, test));\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish test', () => done());\n      recorder.catch();\n    }\n  }",
      "error": {
        "stack": "Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal\n    at navigate (node_modules/puppeteer/lib/cjs/puppeteer/common/FrameManager.js:115:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async FrameManager.navigateFrame (node_modules/puppeteer/lib/cjs/puppeteer/common/FrameManager.js:90:21)\n    at async Frame.goto (node_modules/puppeteer/lib/cjs/puppeteer/common/FrameManager.js:416:16)\n    at async Page.goto (node_modules/puppeteer/lib/cjs/puppeteer/common/Page.js:819:16)\n    at async Puppeteer.amOnPage (node_modules/codeceptjs/lib/helper/Puppeteer.js:630:5)\n    at async Object.seeTheLandingPage (src/test/e2e/pages/LandingPage.js:10:5)\n    at async Test.<anonymous> (src/test/e2e/tests/smoke_test.js:7:3)",
        "message": "net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal",
        "multiple": [
          {
            "multiple": "Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal,Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal,Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal,Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal"
          },
          "Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal",
          "Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal",
          "Error: net::ERR_NAME_NOT_RESOLVED at https://fis-ds-update-web-staging.service.core-compute-aat.internal"
        ]
      }
    }
  ]
}